!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(global,()=>(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{getDefaultPrinter:()=>D,getPrinters:()=>g,print:()=>w});const n=require("path");var i=e.n(n);const r=require("fs");var o=e.n(r);const a=require("child_process"),s=require("util"),c=e.n(s)().promisify(a.execFile),u="electron"in process.versions&&process.mainModule&&process.mainModule.filename.includes("app.asar"),p=function(e){return u?e.replace("app.asar","app.asar.unpacked"):e},l=require("os");var d=e.n(l);function f(){if("win32"!==d().platform())throw"Operating System not supported"}var h=function(e,t,n,i){return new(n||(n=Promise))(function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}c((i=i.apply(e,t||[])).next())})};const m=["odd","even"],v=["portrait","landscape"],y=["noscale","shrink","fit"],P=["duplex","duplexshort","duplexlong","simplex"];function w(e){return h(this,arguments,void 0,function*(e,t={}){if(f(),!e)throw"No PDF specified";if(!o().existsSync(e))throw"No such file";let n=t.sumatraPdfPath||i().join(__dirname,"SumatraPDF-3.4.6-32.exe");t.sumatraPdfPath||(n=p(n));const r=[],{printer:a,silent:s,printDialog:u}=t;u?r.push("-print-dialog"):(a?r.push("-print-to",a):r.push("-print-to-default"),!1!==s&&r.push("-silent"));const l=function(e){const{pages:t,subset:n,orientation:i,scale:r,monochrome:o,side:a,bin:s,paperSize:c,copies:u}=e,p=[];if(t&&p.push(t),n){if(!m.includes(n))throw`Invalid subset provided. Valid names: ${m.join(", ")}`;p.push(n)}if(i){if(!v.includes(i))throw`Invalid orientation provided. Valid names: ${v.join(", ")}`;p.push(i)}if(r){if(!y.includes(r))throw`Invalid scale provided. Valid names: ${y.join(", ")}`;p.push(r)}if(o?p.push("monochrome"):!1===o&&p.push("color"),a){if(!P.includes(a))throw`Invalid side provided. Valid names: ${P.join(", ")}`;p.push(a)}return s&&p.push(`bin=${s}`),c&&p.push(`paper=${c}`),u&&p.push(`${u}x`),p}(t);l.length&&r.push("-print-settings",l.join(",")),r.push(e);try{yield c(n,r)}catch(e){throw e}})}const x={DeviceID:"deviceId",Name:"name",PrinterPaperNames:"paperSizes"};function b(e){const t={deviceId:"",name:"",paperSizes:[]};return e.split(/\r?\n/).forEach(e=>{let[n,i]=e.split(":").map(e=>e.trim());i.match(/^{(.*)(\.{3})}$/)&&(i=i.replace("...}","}"));const r=i.match(/^{(.*)}$/);r&&r[1]&&(i=r[1].split(", "));const o=x[n];void 0!==o&&(t[o]=i)}),{isValid:!(!t.deviceId||!t.name),printerData:t}}const g=function(){return e=this,t=void 0,i=function*(){try{f();const{stdout:e}=yield c("Powershell.exe",["-Command","Get-CimInstance Win32_Printer -Property DeviceID,Name,PrinterPaperNames"]);return function(e){const t=[];return e.split(/(\r?\n){2,}/).map(e=>e.trim()).filter(e=>!!e).forEach(e=>{const{isValid:n,printerData:i}=b(e);n&&t.push(i)}),t}(e)}catch(e){throw e}},new((n=void 0)||(n=Promise))(function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}c((i=i.apply(e,t||[])).next())});var e,t,n,i};const D=function(){return e=this,t=void 0,i=function*(){try{f();const{stdout:e}=yield c("Powershell.exe",["-Command","Get-CimInstance Win32_Printer -Property DeviceID,Name,PrinterPaperNames -Filter Default=true"]),t=e.trim();if(!e)return null;const{isValid:n,printerData:i}=b(t);return n?i:null}catch(e){throw e}},new((n=void 0)||(n=Promise))(function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}c((i=i.apply(e,t||[])).next())});var e,t,n,i};return t})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,